#!/bin/bash

source $(dirname "${BASH_SOURCE[0]}")/path-function

HERE=$(path "$(dirname "${BASH_SOURCE[0]}")")
PATH="$HERE:$PATH"
FOLDER=$PWD

USAGE="$0 [--restrictions-file FILE] PROJECT NO_BUGS FORMULA TOTAL_DEFN"
die() {
  echo "$@" >&2
  exit 1
}

RESTRICTIONS_FILE=''
while [[ "$1" = --* ]]; do
  OPTION=$1; shift
  case $OPTION in
    (--restrictions-file)
      RESTRICTIONS_FILE=$1; shift;;
    (*)
      die "usage: $USAGE";;
  esac
done

if [ "$#" != 4 ]; then echo "usage: $USAGE" >&2; exit 1; fi
PROJECT=$1
NO_BUGS=$2
FORMULA=$3; 
TOTAL_DEFN=$4; 

for BUG in $(seq 1 $NO_BUGS); do 
  echo '============' $BUG
  DIR="$FOLDER/data/$PROJECT/$BUG"; mkdir -p "$DIR"; pushd "$DIR" >/dev/null
  COVERAGE_MATRIX=$FOLDER/data/$PROJECT/$BUG/gzoltars/$PROJECT/$BUG/matrix
  if [ ! -f "$COVERAGE_MATRIX" ]; then echo "given coverage matrix does not exist" >&2; exit 1; fi
  STATEMENT_NAMES=$FOLDER/data/$PROJECT/$BUG/gzoltars/$PROJECT/$BUG/spectra
  if [ ! -f "$STATEMENT_NAMES" ]; then echo "given statement-names file does not exist" >&2; exit 1; fi
  
  DIR="$FOLDER/projects/$PROJECT/$BUG"; mkdir -p "$DIR"; pushd "$DIR" >/dev/null
  if [ "$RESTRICTIONS_FILE" ]; then check-restrictions "$RESTRICTIONS_FILE" --formula "$FORMULA" || continue; fi
  DIR="formula-$FORMULA"; mkdir -p "$DIR"; pushd "$DIR" >/dev/null
  if [ "$RESTRICTIONS_FILE" ]; then check-restrictions "$RESTRICTIONS_FILE" --total-defn "$TOTAL_DEFN" || continue; fi
  DIR="totaldefn-$TOTAL_DEFN"; mkdir -p "$DIR"; pushd "$DIR" >/dev/null

  LINE_SUSPS_FILE=$(pwd)/line-susps.txt

  for SCORING_SCHEME in first last mean median; do
    if [ "$RESTRICTIONS_FILE" ]; then check-restrictions "$RESTRICTIONS_FILE" --scoring-scheme "$SCORING_SCHEME" || continue; fi
    DIR="scoring-$SCORING_SCHEME"; mkdir -p "$DIR"; pushd "$DIR" >/dev/null
    DEST=$(pwd)/score.txt
    score-ranking --project "$PROJECT" --bug "$BUG" \
                  --line-susps <(tail -n +2 "$LINE_SUSPS_FILE") \
                  --scoring-scheme "$SCORING_SCHEME" \
                  --sloc-csv "$HERE/buggy-lines/sloc.csv" \
                  --buggy-lines "$HERE/buggy-lines/$PROJECT-$BUG.buggy.lines" \
                  --output "$DEST"
    popd >/dev/null
  done
  popd >/dev/null
done