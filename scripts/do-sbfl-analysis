#!/bin/bash

source $(dirname "${BASH_SOURCE[0]}")/path-function

HERE=$(path "$(dirname "${BASH_SOURCE[0]}")")
PATH="$HERE:$PATH"

USAGE="$0 [--restrictions-file FILE] PROJECT BUG COVERAGE_MATRIX STATEMENT_NAMES DEFECTS4J_PATH FORMULA TOTAL_DEFN"
die() {
  echo "$@" >&2
  exit 1
}

RESTRICTIONS_FILE=''
while [[ "$1" = --* ]]; do
  OPTION=$1; shift
  case $OPTION in
    (--restrictions-file)
      RESTRICTIONS_FILE=$1; shift;;
    (*)
      die "usage: $USAGE";;
  esac
done

if [ "$#" != 7 ]; then echo "usage: $USAGE" >&2; exit 1; fi
#@TODO: Check if project is in the external file
PROJECT=$1
#@TODO: Check if the bug number is within the range of number of bugs from the external file
BUG=$2
COVERAGE_MATRIX="$(path "$3")"; if [ ! -f "$COVERAGE_MATRIX" ]; then echo "given coverage matrix does not exist" >&2; exit 1; fi
STATEMENT_NAMES="$(path "$4")"; if [ ! -f "$STATEMENT_NAMES" ]; then echo "given statement-names file does not exist" >&2; exit 1; fi
D4J_PATH="$(path "$5")"; if [ ! -d "$D4J_PATH" ]; then echo "given defects4j directory does not exist" >&2; exit 1; fi
#@TODO: Accept other formulas
FORMULA=$6; if [ $FORMULA != ochiai ]; then echo "given formula not accepted" >&2; exit 1; fi
#@TODO: Accept elements
TOTAL_DEFN=$7; if [ $TOTAL_DEFN != tests ]; then echo "total-defn not accepted" >&2; exit 1; fi

#@TODO: Turn this path into an argument. To add more flexibility.
TESTS_LOG=$D4J_PATH/framework/projects/$PROJECT/trigger_tests/$BUG
if [ ! -f "$TESTS_LOG" ]; then echo "given logs file does not exist" >&2; exit 1; fi

if [ "$RESTRICTIONS_FILE" ]; then check-restrictions "$RESTRICTIONS_FILE" --formula "$FORMULA" || continue; fi
DIR="results/$PROJECT/$BUG/formula-$FORMULA"; mkdir -p "$DIR"; pushd "$DIR" >/dev/null
if [ "$RESTRICTIONS_FILE" ]; then check-restrictions "$RESTRICTIONS_FILE" --total-defn "$TOTAL_DEFN" || continue; fi
DIR="totaldefn-$TOTAL_DEFN"; mkdir -p "$DIR"; pushd "$DIR" >/dev/null

STMT_SUSPS_FILE=$(pwd)/stmt-susps.txt
crush-matrix --formula "$FORMULA" --matrix "$COVERAGE_MATRIX" \
             --element-type 'Statement' \
             --element-names "$STATEMENT_NAMES" \
             --total-defn "$TOTAL_DEFN" \
             --output "$STMT_SUSPS_FILE" || exit 1

LINE_SUSPS_FILE=$(pwd)/line-susps.txt
stmt-susps-to-line-susps --stmt-susps "$STMT_SUSPS_FILE" \
                         --source-code-lines "$HERE/source-code-lines/$PROJECT-${BUG}b.source-code.lines" \
                         --output "$LINE_SUSPS_FILE" || exit 1

for SCORING_SCHEME in first last mean median; do
  echo '---- ' $SCORING_SCHEME
  if [ "$RESTRICTIONS_FILE" ]; then check-restrictions "$RESTRICTIONS_FILE" --scoring-scheme "$SCORING_SCHEME" || continue; fi
  DIR="scoring-$SCORING_SCHEME"; mkdir -p "$DIR"; pushd "$DIR" >/dev/null
  DEST=$(pwd)/score-slicer.txt
  score-ranking --project "$PROJECT" --bug "$BUG" \
                --line-susps <(tail -n +2 "$LINE_SUSPS_FILE") \
                --scoring-scheme "$SCORING_SCHEME" \
                --sloc-csv "$HERE/buggy-lines/sloc.csv" \
                --buggy-lines "$HERE/buggy-lines/$PROJECT-$BUG.buggy.lines" \
                --output "$DEST" || exit 1
  popd >/dev/null
done

TEST_FAILING=$(grep "^---"  $TESTS_LOG | cut -f2 -d' ')

popd >/dev/null; popd >/dev/null

DIR="output/$PROJECT"; mkdir -p "$DIR"; pushd "$DIR" >/dev/null
JSON_SUSPS_FILE=$(pwd)/$BUG.json
line-susps-to-json-susps --line-susps "$LINE_SUSPS_FILE" \
                         --test-failing "$TEST_FAILING" \
                         --tests-log "$TESTS_LOG" \
                         --bug-no "$BUG" \
                         --output "$JSON_SUSPS_FILE" || exit 1



popd >/dev/null

