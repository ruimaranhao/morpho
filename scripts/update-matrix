#!/usr/bin/python2.7

import argparse
import csv
import json
import re
import numpy as np
    
parser = argparse.ArgumentParser()
parser.add_argument('--tests', required=True)
parser.add_argument('--slicer-test', required=True)
parser.add_argument('--element-names', required=True)
parser.add_argument('--slicer-json-path', required=True)
parser.add_argument('--slicer-json-filename-temp', required=True)
parser.add_argument('--output', required=True)

args = parser.parse_args()
class_name, test_name = args.slicer_test.split('.')

test_name = test_name.replace('/','')
slicer_json_name = args.slicer_json_filename_temp.replace('*',test_name)

i = 0; idx = 0
with open(args.tests,'r') as f:
    tests = f.read().splitlines()
    for t in tests:
        i+=1
        if re.search(r'.*'+class_name+r'::'+test_name, t):
            idx = i

with open(args.slicer_json_path+slicer_json_name) as json_data:
    data = json.load(json_data)

y = np.loadtxt(args.output, dtype=np.object)

dic = {}
with open(args.element_names) as f:
    spectra = f.read().splitlines() 
    i = 0
    for l in spectra:
        class_name, loc = l.split('#')
        dic.setdefault(l, []).append(i)
        i+=1

old = np.array(y[idx-1], copy=True)  

for c in range(np.size(y[idx-1], 0) - 1):
        y[idx-1][c] = 0  

for s in data['slicer']:
    locs = s['loc']
    class_name = s['class'].replace('/','.').replace('.java','')
    for l in locs:
        key = str(class_name)+'#'+str(l)
        if key in dic:
            if old[dic[key][0]] == '1':
                y[idx-1][dic[key][0]] = 1
            else:
                y[idx-1][dic[key][0]] = 0

np.savetxt(args.output, y, fmt = '%s')

