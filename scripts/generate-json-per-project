#!/bin/bash

source $(dirname "${BASH_SOURCE[0]}")/path-function

HERE=$(path "$(dirname "${BASH_SOURCE[0]}")")
PATH="$HERE:$PATH"
FOLDER=$PWD

USAGE="$0 [--restrictions-file FILE] PROJECT NO_BUGS DEFECTS4J_PATH"
die() {
  echo "$@" >&2
  exit 1
}

RESTRICTIONS_FILE=''
while [[ "$1" = --* ]]; do
  OPTION=$1; shift
  case $OPTION in
    (--restrictions-file)
      RESTRICTIONS_FILE=$1; shift;;
    (*)
      die "usage: $USAGE";;
  esac
done

if [ "$#" != 3 ]; then echo "usage: $USAGE" >&2; exit 1; fi
PROJECT=$1
NO_BUGS=$2
D4J_PATH=$3

# creates output folder for project
DIR="$FOLDER/output/$PROJECT"; mkdir -p "$DIR"; pushd "$DIR" >/dev/null

# gets the bugs of a project
DIR="$FOLDER/data/$PROJECT"; mkdir -p "$DIR"; pushd "$DIR" >/dev/null

for BUG in $(seq 1 $NO_BUGS); do 
  
  DIR="$FOLDER/data/$PROJECT/$BUG"; mkdir -p "$DIR"; pushd "$DIR" >/dev/null

  wget http://fault-localization.cs.washington.edu/data/$PROJECT/$BUG/gzoltar-files.tar.gz
  
  tar -xvf gzoltar-files.tar.gz

  COVERAGE_MATRIX=$FOLDER/data/$PROJECT/$BUG/gzoltars/$PROJECT/$BUG/matrix
  if [ ! -f "$COVERAGE_MATRIX" ]; then echo "given coverage matrix does not exist" >&2; exit 1; fi
  STATEMENT_NAMES=$FOLDER/data/$PROJECT/$BUG/gzoltars/$PROJECT/$BUG/spectra
  if [ ! -f "$STATEMENT_NAMES" ]; then echo "given statement-names file does not exist" >&2; exit 1; fi
  TESTS_LOG=$D4J_PATH/framework/projects/$PROJECT/trigger_tests/$BUG
  if [ ! -f "$TESTS_LOG" ]; then echo "given logs file does not exist" >&2; exit 1; fi

  DIR="$FOLDER/projects/$PROJECT/$BUG"; mkdir -p "$DIR"; pushd "$DIR" >/dev/null

  for FORMULA in ochiai; do
    DIR="$FOLDER/projects/$PROJECT/$BUG"; pushd "$DIR" >/dev/null
    if [ "$RESTRICTIONS_FILE" ]; then check-restrictions "$RESTRICTIONS_FILE" --formula "$FORMULA" || continue; fi
    DIR="formula-$FORMULA"; mkdir -p "$DIR"; pushd "$DIR" >/dev/null
    for TOTAL_DEFN in tests; do
      if [ "$RESTRICTIONS_FILE" ]; then check-restrictions "$RESTRICTIONS_FILE" --total-defn "$TOTAL_DEFN" || continue; fi
      DIR="totaldefn-$TOTAL_DEFN"; mkdir -p "$DIR"; pushd "$DIR" >/dev/null

      STMT_SUSPS_FILE=$(pwd)/stmt-susps.txt
      crush-matrix --formula "$FORMULA" --matrix "$COVERAGE_MATRIX" \
                   --element-type 'Statement' \
                   --element-names "$STATEMENT_NAMES" \
                   --total-defn "$TOTAL_DEFN" \
                   --output "$STMT_SUSPS_FILE" || exit 1

      LINE_SUSPS_FILE=$(pwd)/line-susps.txt
      stmt-susps-to-line-susps --stmt-susps "$STMT_SUSPS_FILE" \
                               --source-code-lines "$HERE/source-code-lines/$PROJECT-${BUG}b.source-code.lines" \
                               --output "$LINE_SUSPS_FILE" || exit 1

      TEST_FAILING=$(grep "^---"  $D4J_PATH/framework/projects/$PROJECT/trigger_tests/$BUG | cut -f2 -d' ')

      DIR="$FOLDER/output/$PROJECT"; mkdir -p "$DIR"; pushd "$DIR" >/dev/null
      JSON_SUSPS_FILE=$(pwd)/$BUG.json
      line-susps-to-json-susps --line-susps "$LINE_SUSPS_FILE" \
                               --formula "$FORMULA" \
                               --test-failing "$TEST_FAILING" \
                               --tests-log "$TESTS_LOG" \
                               --output "$JSON_SUSPS_FILE" || exit 1
      fi

      popd >/dev/null
    done

    popd >/dev/null
  done
done




