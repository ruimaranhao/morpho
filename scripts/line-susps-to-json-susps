#!/usr/bin/python2.7

import argparse
import csv
import json
import operator
import re
from itertools import islice

def line_to_class(line):
    classname, loc = line.rsplit('#',1)
    return classname, loc

parser = argparse.ArgumentParser()
parser.add_argument('--line-susps', required=True)
parser.add_argument('--test-failing', required=True)
parser.add_argument('--tests-log', required=True)
parser.add_argument('--bug-no', required=True)
parser.add_argument('--output', required=True)

args = parser.parse_args()

tests_failing = args.test_failing.split('\n')

dic={}
failing = []
with open(args.tests_log) as f:
    lines = f.read().splitlines() 
    start = -1
    for i in range(len(lines)):
        print(lines[i], tests_failing)
        if lines[i] in tests_failing:
            if start > -1:
                failing.append({
                    'test': test_name.replace('--- ',''),
                    'error': lines[start:i]
                })

            test_name = lines[i]
            start = i+1 

        if len(lines)-1 == i and start > -1:
            failing.append({
                'test': test_name.replace('--- ',''),
                'error': lines[start::]
             })

rankings = []
with open(args.line_susps) as fin:
    reader = csv.DictReader(fin)
    for row in reader:
        classname, loc = line_to_class(row['Line'])
        susps = float(row['Suspiciousness'])
        if susps != 0.0:
            rankings.append({
                'class': classname,
                'loc': loc,
                'score': susps
            })

dic['rankings'] = sorted(rankings, key=lambda item: item['score'], reverse=True)
print(failing)
dic['failing'] = failing

# save data in json
with open(args.output, 'w') as outfile:
    json.dump(dic, outfile, indent=4)